#version 460 core

layout (quads, fractional_odd_spacing, ccw) in;

uniform sampler2D heightMap; 
uniform mat4 model;           
uniform mat4 view;            
uniform mat4 projection;      

in vec2 TexCoordinates[];
out float Height;

void main()
{
    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec2 texCoord = vec2(u, v);
    Height = texture(heightMap, texCoord).y / 5.0;

    // retrieve control point position coordinates
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    // compute patch surface normal
    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    vec4 normal = normalize( vec4(cross(uVec.xyz, vVec.xyz), 0) );

    // bilinearly interpolate position coordinate across patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0;

    // displace point along normal
    p += normal * Height;

    // output patch point position in clip space
    gl_Position = projection * view * model * p;
}